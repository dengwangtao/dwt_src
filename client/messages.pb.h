// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace dwt_proto {
class ConnectionResponse;
struct ConnectionResponseDefaultTypeInternal;
extern ConnectionResponseDefaultTypeInternal _ConnectionResponse_default_instance_;
class CreateNodeRequest;
struct CreateNodeRequestDefaultTypeInternal;
extern CreateNodeRequestDefaultTypeInternal _CreateNodeRequest_default_instance_;
class CreateNodeResponse;
struct CreateNodeResponseDefaultTypeInternal;
extern CreateNodeResponseDefaultTypeInternal _CreateNodeResponse_default_instance_;
class HeartbeatMessage;
struct HeartbeatMessageDefaultTypeInternal;
extern HeartbeatMessageDefaultTypeInternal _HeartbeatMessage_default_instance_;
class WrappedRequest;
struct WrappedRequestDefaultTypeInternal;
extern WrappedRequestDefaultTypeInternal _WrappedRequest_default_instance_;
class WrappedResponse;
struct WrappedResponseDefaultTypeInternal;
extern WrappedResponseDefaultTypeInternal _WrappedResponse_default_instance_;
}  // namespace dwt_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::dwt_proto::ConnectionResponse* Arena::CreateMaybeMessage<::dwt_proto::ConnectionResponse>(Arena*);
template<> ::dwt_proto::CreateNodeRequest* Arena::CreateMaybeMessage<::dwt_proto::CreateNodeRequest>(Arena*);
template<> ::dwt_proto::CreateNodeResponse* Arena::CreateMaybeMessage<::dwt_proto::CreateNodeResponse>(Arena*);
template<> ::dwt_proto::HeartbeatMessage* Arena::CreateMaybeMessage<::dwt_proto::HeartbeatMessage>(Arena*);
template<> ::dwt_proto::WrappedRequest* Arena::CreateMaybeMessage<::dwt_proto::WrappedRequest>(Arena*);
template<> ::dwt_proto::WrappedResponse* Arena::CreateMaybeMessage<::dwt_proto::WrappedResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dwt_proto {

enum NodeType : int {
  PERSISTENT = 0,
  EPHEMERAL = 1,
  NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NodeType_IsValid(int value);
constexpr NodeType NodeType_MIN = PERSISTENT;
constexpr NodeType NodeType_MAX = EPHEMERAL;
constexpr int NodeType_ARRAYSIZE = NodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor();
template<typename T>
inline const std::string& NodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeType_descriptor(), enum_t_value);
}
inline bool NodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeType>(
    NodeType_descriptor(), name, value);
}
enum MessageType : int {
  Nothing = 0,
  Connection = 1,
  Service = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = Nothing;
constexpr MessageType MessageType_MAX = Service;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class WrappedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dwt_proto.WrappedRequest) */ {
 public:
  inline WrappedRequest() : WrappedRequest(nullptr) {}
  ~WrappedRequest() override;
  explicit PROTOBUF_CONSTEXPR WrappedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrappedRequest(const WrappedRequest& from);
  WrappedRequest(WrappedRequest&& from) noexcept
    : WrappedRequest() {
    *this = ::std::move(from);
  }

  inline WrappedRequest& operator=(const WrappedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedRequest& operator=(WrappedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrappedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrappedRequest* internal_default_instance() {
    return reinterpret_cast<const WrappedRequest*>(
               &_WrappedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrappedRequest& a, WrappedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WrappedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrappedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrappedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WrappedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WrappedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WrappedRequest& from) {
    WrappedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrappedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwt_proto.WrappedRequest";
  }
  protected:
  explicit WrappedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestParametersFieldNumber = 2,
    kRequestTypeFieldNumber = 1,
  };
  // bytes requestParameters = 2;
  void clear_requestparameters();
  const std::string& requestparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestparameters();
  PROTOBUF_NODISCARD std::string* release_requestparameters();
  void set_allocated_requestparameters(std::string* requestparameters);
  private:
  const std::string& _internal_requestparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestparameters(const std::string& value);
  std::string* _internal_mutable_requestparameters();
  public:

  // .dwt_proto.MessageType requestType = 1;
  void clear_requesttype();
  ::dwt_proto::MessageType requesttype() const;
  void set_requesttype(::dwt_proto::MessageType value);
  private:
  ::dwt_proto::MessageType _internal_requesttype() const;
  void _internal_set_requesttype(::dwt_proto::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:dwt_proto.WrappedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestparameters_;
    int requesttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WrappedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dwt_proto.WrappedResponse) */ {
 public:
  inline WrappedResponse() : WrappedResponse(nullptr) {}
  ~WrappedResponse() override;
  explicit PROTOBUF_CONSTEXPR WrappedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrappedResponse(const WrappedResponse& from);
  WrappedResponse(WrappedResponse&& from) noexcept
    : WrappedResponse() {
    *this = ::std::move(from);
  }

  inline WrappedResponse& operator=(const WrappedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedResponse& operator=(WrappedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrappedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrappedResponse* internal_default_instance() {
    return reinterpret_cast<const WrappedResponse*>(
               &_WrappedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WrappedResponse& a, WrappedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WrappedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrappedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrappedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WrappedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WrappedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WrappedResponse& from) {
    WrappedResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrappedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwt_proto.WrappedResponse";
  }
  protected:
  explicit WrappedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kResponseTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .dwt_proto.MessageType responseType = 1;
  void clear_responsetype();
  ::dwt_proto::MessageType responsetype() const;
  void set_responsetype(::dwt_proto::MessageType value);
  private:
  ::dwt_proto::MessageType _internal_responsetype() const;
  void _internal_set_responsetype(::dwt_proto::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:dwt_proto.WrappedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int responsetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ConnectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dwt_proto.ConnectionResponse) */ {
 public:
  inline ConnectionResponse() : ConnectionResponse(nullptr) {}
  ~ConnectionResponse() override;
  explicit PROTOBUF_CONSTEXPR ConnectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionResponse(const ConnectionResponse& from);
  ConnectionResponse(ConnectionResponse&& from) noexcept
    : ConnectionResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionResponse& operator=(const ConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionResponse& operator=(ConnectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionResponse*>(
               &_ConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectionResponse& a, ConnectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionResponse& from) {
    ConnectionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwt_proto.ConnectionResponse";
  }
  protected:
  explicit ConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // uint64 sessionId = 1;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dwt_proto.ConnectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t sessionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dwt_proto.HeartbeatMessage) */ {
 public:
  inline HeartbeatMessage() : HeartbeatMessage(nullptr) {}
  ~HeartbeatMessage() override;
  explicit PROTOBUF_CONSTEXPR HeartbeatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatMessage(const HeartbeatMessage& from);
  HeartbeatMessage(HeartbeatMessage&& from) noexcept
    : HeartbeatMessage() {
    *this = ::std::move(from);
  }

  inline HeartbeatMessage& operator=(const HeartbeatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatMessage& operator=(HeartbeatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatMessage* internal_default_instance() {
    return reinterpret_cast<const HeartbeatMessage*>(
               &_HeartbeatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartbeatMessage& a, HeartbeatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartbeatMessage& from) {
    HeartbeatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwt_proto.HeartbeatMessage";
  }
  protected:
  explicit HeartbeatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // uint64 sessionId = 1;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dwt_proto.HeartbeatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t sessionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CreateNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dwt_proto.CreateNodeRequest) */ {
 public:
  inline CreateNodeRequest() : CreateNodeRequest(nullptr) {}
  ~CreateNodeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNodeRequest(const CreateNodeRequest& from);
  CreateNodeRequest(CreateNodeRequest&& from) noexcept
    : CreateNodeRequest() {
    *this = ::std::move(from);
  }

  inline CreateNodeRequest& operator=(const CreateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeRequest& operator=(CreateNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNodeRequest*>(
               &_CreateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateNodeRequest& a, CreateNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateNodeRequest& from) {
    CreateNodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwt_proto.CreateNodeRequest";
  }
  protected:
  explicit CreateNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kNodeDataFieldNumber = 2,
    kNodeTypeFieldNumber = 3,
  };
  // bytes NodeName = 1;
  void clear_nodename();
  const std::string& nodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // bytes NodeData = 2;
  void clear_nodedata();
  const std::string& nodedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodedata();
  PROTOBUF_NODISCARD std::string* release_nodedata();
  void set_allocated_nodedata(std::string* nodedata);
  private:
  const std::string& _internal_nodedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodedata(const std::string& value);
  std::string* _internal_mutable_nodedata();
  public:

  // .dwt_proto.NodeType NodeType = 3;
  void clear_nodetype();
  ::dwt_proto::NodeType nodetype() const;
  void set_nodetype(::dwt_proto::NodeType value);
  private:
  ::dwt_proto::NodeType _internal_nodetype() const;
  void _internal_set_nodetype(::dwt_proto::NodeType value);
  public:

  // @@protoc_insertion_point(class_scope:dwt_proto.CreateNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodedata_;
    int nodetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CreateNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dwt_proto.CreateNodeResponse) */ {
 public:
  inline CreateNodeResponse() : CreateNodeResponse(nullptr) {}
  ~CreateNodeResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNodeResponse(const CreateNodeResponse& from);
  CreateNodeResponse(CreateNodeResponse&& from) noexcept
    : CreateNodeResponse() {
    *this = ::std::move(from);
  }

  inline CreateNodeResponse& operator=(const CreateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeResponse& operator=(CreateNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNodeResponse*>(
               &_CreateNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateNodeResponse& a, CreateNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateNodeResponse& from) {
    CreateNodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwt_proto.CreateNodeResponse";
  }
  protected:
  explicit CreateNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOKFieldNumber = 1,
  };
  // bool OK = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dwt_proto.CreateNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WrappedRequest

// .dwt_proto.MessageType requestType = 1;
inline void WrappedRequest::clear_requesttype() {
  _impl_.requesttype_ = 0;
}
inline ::dwt_proto::MessageType WrappedRequest::_internal_requesttype() const {
  return static_cast< ::dwt_proto::MessageType >(_impl_.requesttype_);
}
inline ::dwt_proto::MessageType WrappedRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:dwt_proto.WrappedRequest.requestType)
  return _internal_requesttype();
}
inline void WrappedRequest::_internal_set_requesttype(::dwt_proto::MessageType value) {
  
  _impl_.requesttype_ = value;
}
inline void WrappedRequest::set_requesttype(::dwt_proto::MessageType value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:dwt_proto.WrappedRequest.requestType)
}

// bytes requestParameters = 2;
inline void WrappedRequest::clear_requestparameters() {
  _impl_.requestparameters_.ClearToEmpty();
}
inline const std::string& WrappedRequest::requestparameters() const {
  // @@protoc_insertion_point(field_get:dwt_proto.WrappedRequest.requestParameters)
  return _internal_requestparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WrappedRequest::set_requestparameters(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dwt_proto.WrappedRequest.requestParameters)
}
inline std::string* WrappedRequest::mutable_requestparameters() {
  std::string* _s = _internal_mutable_requestparameters();
  // @@protoc_insertion_point(field_mutable:dwt_proto.WrappedRequest.requestParameters)
  return _s;
}
inline const std::string& WrappedRequest::_internal_requestparameters() const {
  return _impl_.requestparameters_.Get();
}
inline void WrappedRequest::_internal_set_requestparameters(const std::string& value) {
  
  _impl_.requestparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* WrappedRequest::_internal_mutable_requestparameters() {
  
  return _impl_.requestparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* WrappedRequest::release_requestparameters() {
  // @@protoc_insertion_point(field_release:dwt_proto.WrappedRequest.requestParameters)
  return _impl_.requestparameters_.Release();
}
inline void WrappedRequest::set_allocated_requestparameters(std::string* requestparameters) {
  if (requestparameters != nullptr) {
    
  } else {
    
  }
  _impl_.requestparameters_.SetAllocated(requestparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestparameters_.IsDefault()) {
    _impl_.requestparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dwt_proto.WrappedRequest.requestParameters)
}

// -------------------------------------------------------------------

// WrappedResponse

// .dwt_proto.MessageType responseType = 1;
inline void WrappedResponse::clear_responsetype() {
  _impl_.responsetype_ = 0;
}
inline ::dwt_proto::MessageType WrappedResponse::_internal_responsetype() const {
  return static_cast< ::dwt_proto::MessageType >(_impl_.responsetype_);
}
inline ::dwt_proto::MessageType WrappedResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:dwt_proto.WrappedResponse.responseType)
  return _internal_responsetype();
}
inline void WrappedResponse::_internal_set_responsetype(::dwt_proto::MessageType value) {
  
  _impl_.responsetype_ = value;
}
inline void WrappedResponse::set_responsetype(::dwt_proto::MessageType value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:dwt_proto.WrappedResponse.responseType)
}

// bytes data = 2;
inline void WrappedResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& WrappedResponse::data() const {
  // @@protoc_insertion_point(field_get:dwt_proto.WrappedResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WrappedResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dwt_proto.WrappedResponse.data)
}
inline std::string* WrappedResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dwt_proto.WrappedResponse.data)
  return _s;
}
inline const std::string& WrappedResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void WrappedResponse::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* WrappedResponse::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* WrappedResponse::release_data() {
  // @@protoc_insertion_point(field_release:dwt_proto.WrappedResponse.data)
  return _impl_.data_.Release();
}
inline void WrappedResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dwt_proto.WrappedResponse.data)
}

// -------------------------------------------------------------------

// ConnectionResponse

// uint64 sessionId = 1;
inline void ConnectionResponse::clear_sessionid() {
  _impl_.sessionid_ = uint64_t{0u};
}
inline uint64_t ConnectionResponse::_internal_sessionid() const {
  return _impl_.sessionid_;
}
inline uint64_t ConnectionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:dwt_proto.ConnectionResponse.sessionId)
  return _internal_sessionid();
}
inline void ConnectionResponse::_internal_set_sessionid(uint64_t value) {
  
  _impl_.sessionid_ = value;
}
inline void ConnectionResponse::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:dwt_proto.ConnectionResponse.sessionId)
}

// -------------------------------------------------------------------

// HeartbeatMessage

// uint64 sessionId = 1;
inline void HeartbeatMessage::clear_sessionid() {
  _impl_.sessionid_ = uint64_t{0u};
}
inline uint64_t HeartbeatMessage::_internal_sessionid() const {
  return _impl_.sessionid_;
}
inline uint64_t HeartbeatMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:dwt_proto.HeartbeatMessage.sessionId)
  return _internal_sessionid();
}
inline void HeartbeatMessage::_internal_set_sessionid(uint64_t value) {
  
  _impl_.sessionid_ = value;
}
inline void HeartbeatMessage::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:dwt_proto.HeartbeatMessage.sessionId)
}

// -------------------------------------------------------------------

// CreateNodeRequest

// bytes NodeName = 1;
inline void CreateNodeRequest::clear_nodename() {
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& CreateNodeRequest::nodename() const {
  // @@protoc_insertion_point(field_get:dwt_proto.CreateNodeRequest.NodeName)
  return _internal_nodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNodeRequest::set_nodename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dwt_proto.CreateNodeRequest.NodeName)
}
inline std::string* CreateNodeRequest::mutable_nodename() {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:dwt_proto.CreateNodeRequest.NodeName)
  return _s;
}
inline const std::string& CreateNodeRequest::_internal_nodename() const {
  return _impl_.nodename_.Get();
}
inline void CreateNodeRequest::_internal_set_nodename(const std::string& value) {
  
  _impl_.nodename_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNodeRequest::_internal_mutable_nodename() {
  
  return _impl_.nodename_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNodeRequest::release_nodename() {
  // @@protoc_insertion_point(field_release:dwt_proto.CreateNodeRequest.NodeName)
  return _impl_.nodename_.Release();
}
inline void CreateNodeRequest::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  _impl_.nodename_.SetAllocated(nodename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodename_.IsDefault()) {
    _impl_.nodename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dwt_proto.CreateNodeRequest.NodeName)
}

// bytes NodeData = 2;
inline void CreateNodeRequest::clear_nodedata() {
  _impl_.nodedata_.ClearToEmpty();
}
inline const std::string& CreateNodeRequest::nodedata() const {
  // @@protoc_insertion_point(field_get:dwt_proto.CreateNodeRequest.NodeData)
  return _internal_nodedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNodeRequest::set_nodedata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodedata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dwt_proto.CreateNodeRequest.NodeData)
}
inline std::string* CreateNodeRequest::mutable_nodedata() {
  std::string* _s = _internal_mutable_nodedata();
  // @@protoc_insertion_point(field_mutable:dwt_proto.CreateNodeRequest.NodeData)
  return _s;
}
inline const std::string& CreateNodeRequest::_internal_nodedata() const {
  return _impl_.nodedata_.Get();
}
inline void CreateNodeRequest::_internal_set_nodedata(const std::string& value) {
  
  _impl_.nodedata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNodeRequest::_internal_mutable_nodedata() {
  
  return _impl_.nodedata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNodeRequest::release_nodedata() {
  // @@protoc_insertion_point(field_release:dwt_proto.CreateNodeRequest.NodeData)
  return _impl_.nodedata_.Release();
}
inline void CreateNodeRequest::set_allocated_nodedata(std::string* nodedata) {
  if (nodedata != nullptr) {
    
  } else {
    
  }
  _impl_.nodedata_.SetAllocated(nodedata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodedata_.IsDefault()) {
    _impl_.nodedata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dwt_proto.CreateNodeRequest.NodeData)
}

// .dwt_proto.NodeType NodeType = 3;
inline void CreateNodeRequest::clear_nodetype() {
  _impl_.nodetype_ = 0;
}
inline ::dwt_proto::NodeType CreateNodeRequest::_internal_nodetype() const {
  return static_cast< ::dwt_proto::NodeType >(_impl_.nodetype_);
}
inline ::dwt_proto::NodeType CreateNodeRequest::nodetype() const {
  // @@protoc_insertion_point(field_get:dwt_proto.CreateNodeRequest.NodeType)
  return _internal_nodetype();
}
inline void CreateNodeRequest::_internal_set_nodetype(::dwt_proto::NodeType value) {
  
  _impl_.nodetype_ = value;
}
inline void CreateNodeRequest::set_nodetype(::dwt_proto::NodeType value) {
  _internal_set_nodetype(value);
  // @@protoc_insertion_point(field_set:dwt_proto.CreateNodeRequest.NodeType)
}

// -------------------------------------------------------------------

// CreateNodeResponse

// bool OK = 1;
inline void CreateNodeResponse::clear_ok() {
  _impl_.ok_ = false;
}
inline bool CreateNodeResponse::_internal_ok() const {
  return _impl_.ok_;
}
inline bool CreateNodeResponse::ok() const {
  // @@protoc_insertion_point(field_get:dwt_proto.CreateNodeResponse.OK)
  return _internal_ok();
}
inline void CreateNodeResponse::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void CreateNodeResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:dwt_proto.CreateNodeResponse.OK)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dwt_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dwt_proto::NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dwt_proto::NodeType>() {
  return ::dwt_proto::NodeType_descriptor();
}
template <> struct is_proto_enum< ::dwt_proto::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dwt_proto::MessageType>() {
  return ::dwt_proto::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
